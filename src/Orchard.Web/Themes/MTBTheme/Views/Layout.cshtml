@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    Style.Include("reset.css");
    Style.Include("site.css?v=1");
    Style.Include("Header.css");
    Style.Include("Nav.css");
    Style.Include("Footer.css");
    Style.Include("Banner.css");
    Style.Include("StandardPage1.css");
    Style.Include("CtaBox.css");
    Style.Include("ContactBox.css");
    Style.Include("Quote.css");
    Style.Include("Helpers.css");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "5"); // Site name and link to the home page
    
    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}

@tag.StartElement
@if (Model.Header != null)
{

<!-- Start: Header Container -->
<div id="header-container" class="wrapper clearfix">
    
    <header>	
			<div id="login-form">
			&nbsp;    
			</div>
			<div id="social-links">
			    <ul>
			        <li><a id="facebook-icon" href="http://www.facebook.com/mtbfitnesstraining" target="_blank">MTB Fitness Facebook Profile</a></li>
			        <li><a id="twitter-icon" href="https://twitter.com/mtb_fitness" target="_blank">MTB Fitness Twitter Profile</a></li>
			    </ul>
			</div>
	</header>

    @Zone(Model.Header)
   
    @if (Model.Navigation != null)
    {
        <nav class="top">
        @Zone(Model.Navigation)
        </nav>
    }

</div>
<!-- End: Header Container -->    
<div class="clear"></div>
}

<div id="main-container">
    <div id="main" class="wrapper clearfix">
        
        @if (Model.BeforeContent != null) {
        <div id="banner" class="row">
            @Zone(Model.BeforeContent)
        </div>
        }

        <!-- Content Start -->
            
        @* the model content for the page is in the Content zone @ the default position (nothing, zero, zilch) *@
        @if (Model.Content != null)
        {
            @Zone(Model.Content)
        }
        <!-- Content End -->
    </div>
</div>

@if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
{
<div id="box-container">
    @if (Model.TripelFirst != null)
    {
    <div id="tripel-first">
        @Zone(Model.TripelFirst)
    </div>
    }
    @if (Model.TripelSecond != null)
    {
    <div id="tripel-second">
        @Zone(Model.TripelSecond)
    </div>
    }
    @if (Model.TripelThird != null)
    {
    <div id="tripel-third">
        @Zone(Model.TripelThird)
    </div>
    }
</div>
}
<div class="clear"></div>

<div id="footer-container">
    <footer class="wrapper">
        @if (Model.Footer != null)
        {
            <nav class="bottom">
            @Zone(Model.Footer)
            </nav>
        }
    </footer>
</div>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>

<script>window.jQuery || document.write('<script src="Scripts/libs/jquery-1.7.2.min.js"><\/script>')</script>

<script src="@Href("~/Themes/MTBTheme/Scripts/plugins.js")"></script>
<script src="@Href("~/Themes/MTBTheme/Scripts/libs/jquery.nivo.slider.js")"></script>
<script src="@Href("~/Themes/MTBTheme/Scripts/script.js")"></script>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-38599099-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>

@tag.EndElement